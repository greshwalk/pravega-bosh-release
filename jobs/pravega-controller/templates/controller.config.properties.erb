<% zk = link('zookeepers') -%>
controller.containerCount=<%= p('container_count') %>
controller.hostMonitorEnabled=${HOST_MONITOR_ENABLE}
controller.minRebalanceIntervalSeconds=${CLUSTER_MIN_REBALANCE_INTERVAL}
controller.replyWithStackTraceOnError=${REPLY_WITH_STACK_TRACE_ON_ERROR}
controller.requestTracingEnabled=${REQUEST_TRACING_ENABLED}
controller.service.port=${CONTROLLER_SERVER_PORT}
controller.service.asyncTaskPoolSize=${ASYNC_TASK_POOL_SIZE}
controller.service.hostIp=${SERVICE_HOST_IP}
controller.service.hostPort=${SERVICE_HOST_PORT}
controller.service.publishedRPCHost=${CONTROLLER_RPC_PUBLISHED_HOST}
controller.service.publishedRPCPort=${CONTROLLER_RPC_PUBLISHED_PORT}
controller.service.cluster=${CLUSTER_NAME}
controller.service.restIp=${REST_SERVER_IP}
controller.service.restPort=${REST_SERVER_PORT}
controller.auth.enabled=${AUTHORIZATION_ENABLED}
controller.auth.userPasswordFile=${USER_PASSWORD_FILE}
controller.auth.tlsEnabled=${TLS_ENABLED}
controller.auth.tlsCertFile=${TLS_CERT_FILE}
controller.auth.tlsTrustStore=${TLS_TRUST_STORE}
controller.auth.tlsKeyFile=${TLS_KEY_FILE}
controller.auth.tokenSigningKey=${TOKEN_SIGNING_KEY}
controller.zk.url=<%= "#{zk.instances.first.address}:#{zk.p('client_port')}" %>
controller.zk.retryIntervalMillis=${ZK_RETRY_SLEEP_MS}
controller.zk.maxRetries=${ZK_MAX_RETRIES}
controller.zk.sessionTimeoutMillis=${ZK_SESSION_TIMEOUT_MS}
controller.zk.secureConnection=${SECURE_ZK}
controller.retention.frequencyMinutes=${RETENTION_FREQUENCY_MINUTES}
controller.retention.bucketCount=${BUCKET_COUNT}
controller.retention.threadCount=${RETENTION_THREAD_POOL_SIZE}
controller.transaction.minLeaseValue=${MIN_LEASE_VALUE}
controller.transaction.maxLeaseValue=${MAX_LEASE_VALUE}
controller.transaction.ttlHours=${COMPLETED_TXN_TTL_IN_HOURS}
#controller.scale.streamName=_requeststream
#controller.scale.readerGroup=scaleGroup
